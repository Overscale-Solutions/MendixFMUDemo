// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package forms.actions;

import java.io.File;
import java.util.ArrayList;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import no.ntnu.ihb.fmi4j.importer.fmi2.CoSimulationSlave;
import no.ntnu.ihb.fmi4j.importer.fmi2.Fmu;
import no.ntnu.ihb.fmi4j.Fmi4jVariableUtils;
import org.json.JSONArray;
import org.json.JSONObject;

public class JA_RunFMU extends CustomJavaAction<java.lang.String>
{
	private final java.math.BigDecimal Velocity;
	private final java.math.BigDecimal Height;
	private final java.math.BigDecimal SimulationTime;
	private final java.math.BigDecimal StepSize;

	public JA_RunFMU(
		IContext context,
		java.math.BigDecimal _velocity,
		java.math.BigDecimal _height,
		java.math.BigDecimal _simulationTime,
		java.math.BigDecimal _stepSize
	)
	{
		super(context);
		this.Velocity = _velocity;
		this.Height = _height;
		this.SimulationTime = _simulationTime;
		this.StepSize = _stepSize;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE

        Fmu fmu = Fmu.from(new File("../userlib/BouncingBall.fmu")); //URLs are also supported
        CoSimulationSlave slave = fmu.asCoSimulationFmu().newInstance();
        
        slave.simpleSetup();
        
        ArrayList<Double> what = new ArrayList<Double>();
        ArrayList<String[]> neat = new ArrayList<String[]>();
        
        Fmi4jVariableUtils.writeReal(slave, "h", this.Height.doubleValue());
        Fmi4jVariableUtils.writeReal(slave, "v", this.Velocity.doubleValue());
        
        JSONArray jsonArray = new JSONArray();


        double t = 0;
        double stop = this.SimulationTime.doubleValue();
        double stepSize = this.StepSize.doubleValue();
        while(t <= stop) {
        	slave.doStep(t, stepSize);
        	
            var time = slave.getModelDescription().getVariableByName("time").asRealVariable(); // simulation time
            var position = slave.getModelDescription().getVariableByName("h").asRealVariable();;
            var velocity = slave.getModelDescription().getVariableByName("v").asRealVariable();;
                       
            
            var realTime = Fmi4jVariableUtils.read(time, slave).getValue();
            var realPos = Fmi4jVariableUtils.read(position, slave).getValue();
            var realVelocity = Fmi4jVariableUtils.read(velocity, slave).getValue();
            

            JSONObject jsonObject = new JSONObject();
            jsonObject.put("time", realTime);
            jsonObject.put("position", realPos);
            jsonObject.put("velocity", realVelocity);
            
            jsonArray.put(jsonObject);
            
            //neat.add(new String[] {realTime, realPos, realVelocity});

            t += stepSize;
        }
        
        slave.terminate(); //or close, try with resources is also supported
        fmu.close();
                
        return jsonArray.toString();
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_RunFMU";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
