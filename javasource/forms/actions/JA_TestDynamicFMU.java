// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package forms.actions;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.apache.commons.io.IOUtils;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import forms.proxies.FMUFile;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import java.util.Map;
import no.ntnu.ihb.fmi4j.importer.fmi2.CoSimulationSlave;
import no.ntnu.ihb.fmi4j.importer.fmi2.Fmu;
import no.ntnu.ihb.fmi4j.modeldescription.variables.TypedScalarVariable;

public class JA_TestDynamicFMU extends CustomJavaAction<java.util.List<IMendixObject>>
{
	/** @deprecated use FMUFile.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __FMUFile;
	private final forms.proxies.FMUFile FMUFile;

	public JA_TestDynamicFMU(
		IContext context,
		IMendixObject _fMUFile
	)
	{
		super(context);
		this.__FMUFile = _fMUFile;
		this.FMUFile = _fMUFile == null ? null : forms.proxies.FMUFile.initialize(getContext(), _fMUFile);
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE

		Files.createDirectories(Paths.get("/tmp/"));
		File target = Files.createTempFile(Paths.get("/tmp/"), "temp", ".fmu").toFile();
		InputStream is = Core.getFileDocumentContent(getContext(), this.FMUFile.getMendixObject());
		byte[] buffer = IOUtils.toByteArray(is);
		
		FileOutputStream fos = new FileOutputStream(target);
		fos.write(buffer);
		
		
		// Instantiate fmu
		Fmu fmu = Fmu.from(target); 
		CoSimulationSlave slave = fmu.asCoSimulationFmu().newInstance();
        slave.simpleSetup();
		
		
        // List to hold Mendix objects
        List<IMendixObject> paramList = new ArrayList<>();

        // Get variables from fmu
        var modelDescription = slave.getModelVariables();
        var it = modelDescription.iterator();
        
        // Iterate over model variables
        while (it.hasNext()) {
            TypedScalarVariable<?> element = it.next();
            
            // Create Mendix objects
            var param = Core.instantiate(getContext(), "Forms.FMUParameter");        
            Map<String, String> changes = new HashMap<>();
            changes.put("Name", element.getName());
            changes.put("Description", element.getDescription());
            changes.put("DataType", element.getType().getTypeName());
            
            Core.change(getContext(), param, changes);
            paramList.add(param);
        }
        
        slave.terminate(); 
        fmu.close();
                
        return paramList;
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_TestDynamicFMU";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
